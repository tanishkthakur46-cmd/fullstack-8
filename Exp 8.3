------------------------------Install Dependencies--------------------------
mkdir rbac-jwt-demo
cd rbac-jwt-demo
npm init -y
npm install express jsonwebtoken body-parser

----------------------------server.js---------------------------------------
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

const JWT_SECRET = "mysecretkey";

// ----- SAMPLE USERS -----
const users = [
  { id: 1, username: "adminUser", password: "admin123", role: "Admin" },
  { id: 2, username: "moderatorUser", password: "mod123", role: "Moderator" },
  { id: 3, username: "normalUser", password: "user123", role: "User" },
];

// ----- LOGIN ROUTE -----
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const user = users.find(
    (u) => u.username === username && u.password === password
  );

  if (!user) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  // Create JWT token with role
  const token = jwt.sign(
    { id: user.id, username: user.username, role: user.role },
    JWT_SECRET,
    { expiresIn: "1h" }
  );

  res.json({ token });
});

// ----- TOKEN VERIFICATION MIDDLEWARE -----
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader)
    return res.status(401).json({ message: "Token missing" });

  const token = authHeader.split(" ")[1];

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err)
      return res.status(403).json({ message: "Invalid token" });

    req.user = decoded;
    next();
  });
}

// ----- ROLE CHECK MIDDLEWARE -----
function authorizeRoles(...allowedRoles) {
  return (req, res, next) => {
    if (!allowedRoles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ message: "Access denied: insufficient role" });
    }
    next();
  };
}

// ----- PROTECTED ROUTES -----

// Admin only
app.get("/admin-dashboard", verifyToken, authorizeRoles("Admin"), (req, res) => {
  res.json({
    message: "Welcome to the Admin dashboard",
    user: req.user,
  });
});

// Moderator only
app.get(
  "/moderator-panel",
  verifyToken,
  authorizeRoles("Moderator"),
  (req, res) => {
    res.json({
      message: "Welcome to the Moderator panel",
      user: req.user,
    });
  }
);

// User or Admin
app.get(
  "/user-profile",
  verifyToken,
  authorizeRoles("User", "Admin"),
  (req, res) => {
    res.json({
      message: `Welcome to your profile, ${req.user.username}`,
      user: req.user,
    });
  }
);

// ----- START SERVER -----
app.listen(3000, () => {
  console.log("Server running on http://localhost:3000");
});
-------------------------------------------------------------------------------
